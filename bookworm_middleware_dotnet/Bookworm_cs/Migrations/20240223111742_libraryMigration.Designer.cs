// <auto-generated />
using Bookworm_cs.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookworm_cs.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240223111742_libraryMigration")]
    partial class libraryMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookworm_cs.Models.LibraryPackage", b =>
                {
                    b.Property<int>("LibraryPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryPackageId"));

                    b.Property<int>("MaxBooks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfDays")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("LibraryPackageId");

                    b.ToTable("LibraryPackages");
                });

            modelBuilder.Entity("Bookworm_cs.Models.PackageProduct", b =>
                {
                    b.Property<int>("packageProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("packageProductId"));

                    b.Property<int>("LibrarypackageId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("packageProductId");

                    b.HasIndex("LibrarypackageId");

                    b.HasIndex("ProductId");

                    b.ToTable("PackageProducts");
                });

            modelBuilder.Entity("Bookworm_cs.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Bookworm_cs.Models.PackageProduct", b =>
                {
                    b.HasOne("Bookworm_cs.Models.LibraryPackage", "LibraryPackage")
                        .WithMany("Products")
                        .HasForeignKey("LibrarypackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookworm_cs.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryPackage");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bookworm_cs.Models.LibraryPackage", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
